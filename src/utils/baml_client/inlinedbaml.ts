/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "answer.baml": "class QuestionAnalysisResponse {\n  original_text string @description(\"Echo of the user's input text verbatim\")\n  has_question bool @description(\"Whether the text contains a question\")\n  question string? @description(\"Concise summary of the user's question in 10 words or fewer\")\n  answer string? @description(\"Direct answer in 20 words or fewer\")\n}\n\nfunction AnswerQuestion(text: string) -> QuestionAnalysisResponse {\n  client \"Groq\"\n  prompt #\"\n    You are an assistant that analyzes a user's message to determine if it contains a question.\n    Instructions:\n    - Set original_text to the user's input text verbatim.\n    - Set has_question to true only if a question is present; otherwise false.\n    - If has_question is true:\n      - question: return a concise, optionally personable summary of the user's question in 10 words or fewer.\n        Do not include prefixed phrases like 'You asked'.\n      - answer: provide a direct answer in 20 words or fewer.\n    - If no question is present, set question and answer to null.\n    - If the user's message appears to be referring to them speaking to another person then set has_question to false.\n\n    {{ _.role(\"user\") }} {{ text }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest test_answer_question {\n  functions [AnswerQuestion]\n  args {\n    text \"What is the capital of France?\"\n  }\n}\n",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Groq {\n  provider openai-generic\n  options {\n    base_url \"https://api.groq.com/openai/v1\"\n    api_key env.GROQ_API_KEY\n    model \"openai/gpt-oss-20b\"\n  }\n}\n\nclient<llm> GroqHeavy {\n  provider openai-generic\n  options {\n    base_url \"https://api.groq.com/openai/v1\"\n    api_key env.GROQ_API_KEY\n    model \"openai/gpt-oss-120b\"\n  }\n}\n\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../src/utils/\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.204.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "route.baml": "enum Router {\n    WEATHER\n    WEB_SEARCH\n    LLM_CALL\n}\n\nclass RoutingBehavior {\n    origin string @description(\"Echo of the user's input text verbatim.\")\n    routing Router\n}\n\nfunction Route(text: string) -> RoutingBehavior {\n    client \"GroqHeavy\"\n    prompt #\"\n        You are a routing assistant. You are given a user's message and you need to determine which router to use. If a query feels ambiguous, return LLM_CALL.\n        {{ _.role(\"user\") }} {{ text }}\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest test_weather {\n    functions [Route]\n    args {\n        text \"What is the weather in San Francisco?\"\n    }\n    @@assert( {{ this.routing == \"WEATHER\"}})\n}\n\ntest test_web_search {\n    functions [Route]\n    args {\n        text \"Who is the current president of the United States?\"\n    }\n    @@assert( {{ this.routing == \"WEB_SEARCH\"}})\n}\n\ntest test_llm_call {\n    functions [Route]\n    args {\n        text \"Why is the UV index such an important metric to measure in NYC?\"\n    }\n    @@assert( {{ this.routing == \"LLM_CALL\"}})\n}",
  "weather.baml": "class WeatherConditionLite {\n  id int\n  main string\n  description string\n  icon string\n}\n\nclass CurrentLite {\n  temperature float\n  feels_like float\n  conditions WeatherConditionLite\n  humidity int\n  pressure int\n  wind_speed float\n  wind_direction int\n  visibility int\n  uv_index float\n  clouds int\n}\n\nclass TempBlock {\n  day float\n  min float\n  max float\n  night float\n}\n\nclass DailyForecastItem {\n  date string\n  summary string\n  temperature TempBlock\n  conditions WeatherConditionLite\n  precipitation_probability float\n  rain float\n}\n\nclass LocationLite {\n  lat float\n  lon float\n  timezone string\n}\n\nclass AlertLite {\n  sender_name string\n  event string\n  start int\n  end int\n  description string\n  tags string[]\n}\n\nclass FormattedWeather {\n  location LocationLite\n  current CurrentLite\n  daily_forecast DailyForecastItem[]\n  alerts AlertLite[]\n}\n\nclass WeatherLines {\n  lines string[]\n}\n\nfunction SummarizeWeatherFormatted(input: FormattedWeather) -> WeatherLines {\n  client \"openai/gpt-4o-mini\"\n\n  prompt #\"\n  You are a witty, conversational weather reporter that's super brief even if you have a lot of data to work with.\n  Write exactly 10 words that sound like a friendly human texted them to a friend.\n  Avoid bullet points, lists, or emoji. \n  Use the data to describe the weather on a scale of 1-10 out of 10 and include the \"vibe rating\" of the weather.\n  {{ ctx.output_format }}\n\n  Style rules:\n  - You are only allowed to print 3 lines in the list output. \n  - Each line can be a continuation of the previous line.\n  - The first line should be the scale and the vibe rating.\n  - The second line should be the current weather.\n  - The third line should be the alert if there is one.\n\n  Data (verbatim):\n  Location:\n    timezone=\"{{ input.location.timezone }}\"\n  Now:\n    temp_f={{ input.current.temperature }}\n    feels_f={{ input.current.feels_like }}\n    desc=\"{{ input.current.conditions.description }}\"\n    wind_ms={{ input.current.wind_speed }}\n    wind_deg={{ input.current.wind_direction }}\n    humidity={{ input.current.humidity }}\n    uv_index={{ input.current.uv_index }}\n    clouds={{ input.current.clouds }}\n    visibility_m={{ input.current.visibility }}\n  Today:\n    date=\"{{ input.daily_forecast[0].date if input.daily_forecast|length > 0 else \"\" }}\"\n    min_f={{ input.daily_forecast[0].temperature.min if input.daily_forecast|length > 0 else 0 }}\n    max_f={{ input.daily_forecast[0].temperature.max if input.daily_forecast|length > 0 else 0 }}\n    pop={{ input.daily_forecast[0].precipitation_probability if input.daily_forecast|length > 0 else 0.0 }}\n    rain_mm={{ input.daily_forecast[0].rain if input.daily_forecast|length > 0 else 0.0 }}\n    desc=\"{{ input.daily_forecast[0].summary if input.daily_forecast|length > 0 else \"\" }}\"\n  Tomorrow:\n    date=\"{{ input.daily_forecast[1].date if input.daily_forecast|length > 1 else \"\" }}\"\n    min_f={{ input.daily_forecast[1].temperature.min if input.daily_forecast|length > 1 else 0 }}\n    max_f={{ input.daily_forecast[1].temperature.max if input.daily_forecast|length > 1 else 0 }}\n    pop={{ input.daily_forecast[1].precipitation_probability if input.daily_forecast|length > 1 else 0.0 }}\n    rain_mm={{ input.daily_forecast[1].rain if input.daily_forecast|length > 1 else 0.0 }}\n    desc=\"{{ input.daily_forecast[1].summary if input.daily_forecast|length > 1 else \"\" }}\"\n  Alert:\n    {% if input.alerts|length > 0 %}\n    event=\"{{ input.alerts[0].event }}\"\n    end_unix={{ input.alerts[0].end }}\n    sender=\"{{ input.alerts[0].sender_name }}\"\n    tags=\"{{ input.alerts[0].tags | join(\", \") }}\"\n    {% endif %}\n  \"#\n}\n\ntest test_weather_lines {\n  functions [SummarizeWeatherFormatted]\n  args {\n    input {\n      location {\n        lat 40.7128\n        lon -74.006\n        timezone \"America/New_York\"\n      }\n      current {\n        temperature 75.0\n        feels_like 75.0\n        conditions {\n          id 800\n          main \"Clear\"\n          description \"clear sky\"\n          icon \"01d\"\n        }\n        humidity 50\n        pressure 1013\n        wind_speed 5.5\n        wind_direction 180\n        visibility 10000\n        uv_index 6.5\n        clouds 10\n      }\n      daily_forecast [\n        {\n          date \"2025-08-12T17:00:00.000Z\"\n          summary \"Expect a day of partly cloudy with clear spells\"\n          temperature {\n            day 88.46600000000001\n            min 65.984\n            max 88.46600000000001\n            night 76.15400000000005\n          }\n          conditions {\n            id 801\n            main \"Clouds\"\n            description \"few clouds\"\n            icon \"02d\"\n          }\n          precipitation_probability 0\n          rain 0\n        },\n        {\n          date \"2025-08-13T17:00:00.000Z\"\n          summary \"Expect a day of partly cloudy with rain\"\n          temperature {\n            day 87.35\n            min 71.00600000000003\n            max 87.85400000000006\n            night 80.40200000000007\n          }\n          conditions {\n            id 501\n            main \"Rain\"\n            description \"moderate rain\"\n            icon \"10d\"\n          }\n          precipitation_probability 1\n          rain 4.89\n        },\n        {\n          date \"2025-08-14T17:00:00.000Z\"\n          summary \"Expect a day of partly cloudy with rain\"\n          temperature {\n            day 81.68000000000004\n            min 76.424\n            max 88.016\n            night 80.79800000000003\n          }\n          conditions {\n            id 501\n            main \"Rain\"\n            description \"moderate rain\"\n            icon \"10d\"\n          }\n          precipitation_probability 1\n          rain 2.85\n        },\n        {\n          date \"2025-08-15T17:00:00.000Z\"\n          summary \"You can expect clear sky in the morning, with partly cloudy in the afternoon\"\n          temperature {\n            day 84.90200000000007\n            min 75.72200000000004\n            max 85.53200000000001\n            night 76.55\n          }\n          conditions {\n            id 800\n            main \"Clear\"\n            description \"clear sky\"\n            icon \"01d\"\n          }\n          precipitation_probability 0\n          rain 0\n        },\n        {\n          date \"2025-08-16T17:00:00.000Z\"\n          summary \"There will be partly cloudy today\"\n          temperature {\n            day 81.57200000000003\n            min 74.33600000000007\n            max 81.57200000000003\n            night 76.55\n          }\n          conditions {\n            id 803\n            main \"Clouds\"\n            description \"broken clouds\"\n            icon \"04d\"\n          }\n          precipitation_probability 0\n          rain 0\n        },\n        {\n          date \"2025-08-17T17:00:00.000Z\"\n          summary \"There will be partly cloudy today\"\n          temperature {\n            day 90.64400000000008\n            min 73.90400000000005\n            max 90.64400000000008\n            night 83.67800000000007\n          }\n          conditions {\n            id 801\n            main \"Clouds\"\n            description \"few clouds\"\n            icon \"02d\"\n          }\n          precipitation_probability 0.12\n          rain 0\n        },\n        {\n          date \"2025-08-18T16:00:00.000Z\"\n          summary \"There will be rain until morning, then partly cloudy\"\n          temperature {\n            day 85.1\n            min 75.99199999999999\n            max 90.95\n            night 80.25800000000001\n          }\n          conditions {\n            id 500\n            main \"Rain\"\n            description \"light rain\"\n            icon \"10d\"\n          }\n          precipitation_probability 1\n          rain 2.4\n        },\n        {\n          date \"2025-08-19T16:00:00.000Z\"\n          summary \"Expect a day of partly cloudy with rain\"\n          temperature {\n            day 80.49199999999999\n            min 76.13600000000007\n            max 84.81200000000005\n            night 76.13600000000007\n          }\n          conditions {\n            id 501\n            main \"Rain\"\n            description \"moderate rain\"\n            icon \"10d\"\n          }\n          precipitation_probability 1\n          rain 11.61\n        }\n      ]\n      alerts [\n        {\n          sender_name \"NWS Upton NY\"\n          event \"Air Quality Alert\"\n          start 1755004380\n          end 1755054000\n          description \"The New York State Department of Environmental Conservation has\\nissued an Air Quality Health Advisory for the following counties:\\n\\nNew York, Bronx, Kings, Queens, Richmond, Nassau, Suffolk,\\nWestchester, Rockland, Orange, Putnam.\\n\\nuntil 11 PM EDT this evening.\\n\\nAir quality levels in outdoor air are predicted to be greater than\\nan Air Quality Index value of 100 for the pollutant of Ground Level\\nOzone. The Air Quality Index, or AQI, was created as an easy way to\\ncorrelate levels of different pollutants to one scale. The higher\\nthe AQI value, the greater the health concern.\\n\\nWhen pollution levels are elevated, the New York State Department of\\nHealth recommends that individuals consider limiting strenuous\\noutdoor physical activity to reduce the risk of adverse health\\neffects. People who may be especially sensitive to the effects of\\nelevated levels of pollutants include the very young, and those with\\npreexisting respiratory problems such as asthma or heart disease.\\nThose with symptoms should consider consulting their personal\\nphysician.\\n\\nFor additional information, please visit the New York State\\nDepartment of Environmental Conservation website at,\\nhttps://on.ny.gov/nyaqi, or call the Air Quality Hotline at\\n1 800 5 3 5, 1 3 4 5.\"\n          tags [\n            \"Air quality\"\n          ]\n        }\n      ]\n    }\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}